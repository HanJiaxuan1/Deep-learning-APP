# Generated by Django 4.2.1 on 2023-07-18 12:04

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('app', '0003_remove_model_model_data_remove_model_tokenizer_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('cid', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='note content')),
                ('content_html', models.TextField(verbose_name='note content html version')),
                ('create_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='create time')),
                ('views', models.IntegerField(default=0, verbose_name='the number of views')),
            ],
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='user',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='model',
            name='uid',
            field=models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author'),
        ),
        migrations.AddField(
            model_name='model',
            name='views',
            field=models.IntegerField(default=0, verbose_name='the number of views'),
        ),
        migrations.AddField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='user',
            name='password_hash',
            field=models.CharField(default='123', max_length=64),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='model',
            name='tag',
            field=models.CharField(choices=[('option1', 'Text Classification'), ('option2', 'Translator'), ('option3', 'Text Generation'), ('option4', 'Summarization')], max_length=50),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(db_index=True, max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='password',
            field=models.CharField(max_length=32),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.CreateModel(
            name='UserLikeNote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.model', verbose_name='model')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False)),
                ('target_id', models.IntegerField(default=-1, verbose_name='the id of the target user')),
                ('content', models.TextField(verbose_name='note content')),
                ('content_html', models.TextField(verbose_name='note content html version')),
                ('create_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='create time')),
                ('views', models.IntegerField(default=0, verbose_name='the number of views')),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.comment', verbose_name='comment')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='note_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.model', verbose_name='note'),
        ),
        migrations.AddField(
            model_name='comment',
            name='uid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author'),
        ),
    ]
